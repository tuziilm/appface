<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhanghui.appface.persistence.LinkNodeMapper" >
    <resultMap id="BaseResultMap" type="com.zhanghui.appface.domain.LinkNode" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="code" property="code" jdbcType="VARCHAR" />
        <result column="link" property="link" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
    </resultMap>

    <insert id="insert" parameterType="com.zhanghui.appface.domain.LinkNode">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">SELECT LAST_INSERT_ID()</selectKey>
        insert into link_node(
        `name`,
        `code`,
        `link`,
        `status`,
        `remark`,
        `gmt_create`)
        values(
        #{name,jdbcType=VARCHAR},
        #{code,jdbcType=VARCHAR},
        #{link,jdbcType=VARCHAR},
        1,
        #{remark,jdbcType=VARCHAR},
        now())
    </insert>

    <delete id="deleteById">
        delete from link_node where id=#{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByIds">
        delete from link_node where id in
        <foreach collection="array" item="ids"  open="(" separator="," close=")">
            #{ids}
        </foreach>
    </delete>

    <update id="updateByIdSelective" parameterType="com.zhanghui.appface.domain.LinkNode">
        update link_node
        <set>
            <if test="fn.notNull(name)">
                name=#{name,jdbcType=VARCHAR},
            </if>
            <if test="fn.notNull(code)">
                code=#{code,jdbcType=VARCHAR},
            </if>
            <if test="fn.notNull(link)">
                link=#{link,jdbcType=VARCHAR},
            </if>
            <if test="fn.notNull(status)">
                status=#{status,jdbcType=TINYINT},
            </if>
            <if test="fn.notNull(remark)">
                remark=#{remark,jdbcType=VARCHAR}
            </if>
        </set>
        where id=#{id,jdbcType=INTEGER}
    </update>

    <sql id="Base_Column_List">
        `id`,
        `name`,
        `code`,
        `link`,
        `status`,
        `remark`,
        `gmt_create`,
        `gmt_modified`
    </sql>
    <select id="selectAll" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from link_node
    </select>
    <sql id="select_count_where_sql">
        <where>
            <if test="fn.notEmpty(query.name)">
                name like #{query.name}
            </if>
        </where>
    </sql>
    <select id="count" resultType="java.lang.Integer" parameterType="com.zhanghui.appface.common.Paginator" >
        select count(*)
        from link_node
        <include refid="select_count_where_sql"/>
    </select>
    <select id="select" resultMap="BaseResultMap" parameterType="com.zhanghui.appface.common.Paginator" >
        select
        <include refid="Base_Column_List" />
        from link_node
        <include refid="select_count_where_sql"/>
        order by id desc limit #{start},#{sqlSize}
    </select>
    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select <include refid="Base_Column_List"/> from link_node where id=#{id,jdbcType=INTEGER}
    </select>
</mapper>